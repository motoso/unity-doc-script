カスタムプロパティドローワーのベースクラスです。自身で作成した [[Serializable]] クラスや [[PropertyAttribute]] 変数のカスタムドローワーを作成して使用することが出来ます。

PropertyDrawersは 2 つの使い方があります:\\
- [[Serializable]] クラスのGUIをカスタマイズ\\
- [[PropertyAttribute]] の付いたスクリプトメンバーのGUIをカスタマイズ

自身で作成した [[Serializable]] クラスを持つ場合、Inspectorの見た目を変更できるPropertyDrawerを使用することが出来ます。

SerializableクラスのIngredientクラスを考慮したスクリプトが以下になります:
CONVERTEXAMPLE
BEGIN EX
// Recipe.js
// これはエディタスクリプトではありません

enum IngredientUnit { Spoon, Cup, Bowl, Piece }

// カスタムの serializable クラス
class Ingredient extends System.Object {
	var name : String;
	var amount : int = 1;
	var unit : IngredientUnit;
}

var potionResult : Ingredient;
var potionIngredients : Ingredient[];

function Update () {
	// Update logic here...
}
END EX
PropertyDrawerを使用すると、Ingredientクラスの状況によってInspectorを変更することが可能です。
PropertyDrawerを使った場合と使っていない時のIngredientクラスのInspectorを比較してみてください:

{img CustomPropertyDrawer_Class.png}\\
''PropertyDrawerを使用していない (left) 時と使用している (right) 時のクラスのInspectorの表示''

PropertyDrawerは [[CustomPropertyDrawer]] アトリビュートとドローワーを使用するSerializableクラスの型をアタッチします。
CONVERTEXAMPLE
BEGIN EX
// IngredientDrawer.js
@CustomPropertyDrawer (Ingredient)
class IngredientDrawer extends PropertyDrawer {
	
	// 指定の rect でプロパティを描画
	function OnGUI (position : Rect, property : SerializedProperty, label : GUIContent) {
		// 親プロパティで BeginProperty / EndProperty を使用すると
		// プロパティ全体で上書きロジックが動作
		EditorGUI.BeginProperty (position, label, property);
		
		// ラベルを描画
		position = EditorGUI.PrefixLabel (position, GUIUtility.GetControlID (FocusType.Passive), label);
		
		// 子フィールドはインデントしない
		var indent = EditorGUI.indentLevel;
		EditorGUI.indentLevel = 0;
		
		// rect を計算
		var amountRect = new Rect (position.x, position.y, 30, position.height);
		var unitRect = new Rect (position.x+35, position.y, 50, position.height);
		var nameRect = new Rect (position.x+90, position.y, position.width-90, position.height);
		
		// フィールドの描画。各々に GUIContent.none を渡すことでラベルなしで描画
		EditorGUI.PropertyField (amountRect, property.FindPropertyRelative ("amount"), GUIContent.none);
		EditorGUI.PropertyField (unitRect, property.FindPropertyRelative ("unit"), GUIContent.none);
		EditorGUI.PropertyField (nameRect, property.FindPropertyRelative ("name"), GUIContent.none);
		
		// インデントの設定を元に戻す
		EditorGUI.indentLevel = indent;
		
		EditorGUI.EndProperty ();
	}
}
END EX
PropertyDrawerの他の使い方は [[PropertyAttribute]] の付いたメンバーの外観を変更することが出来ます。

例えば整数で特定の範囲内で値を設定したい場合に、Inspectorにはスライダーとして表示することが出来ます。
これは [[RangeAttribute]] としてビルドインされている機能でこのように使用します:
CONVERTEXAMPLE
BEGIN EX
// インスペクタ上で float を 0 と 10 の間を動くスライダーとして表示
@Range (0.0, 10.0)
var myFloat = 0.0;
END EX
自分で [[PropertyAttribute]] を作成することも出来ます。 [[RangeAttribute]] を実装例として参考にしてください。
このアトリビュートはPropertyAttributeクラスを継承する必要があります。必要であればこのアトリビュートクラスにパラメータや変数の値を保持しておくことが出来ます。
BEGIN EX
// これはエディタスクリプトではありません。PropertyAttribute クラスは通常のスクリプト ファイルに配置する必要があります。
class RangeAttribute extends PropertyAttribute {
	var min : float;
	var max : float;
	
	function RangeAttribute (min : float, max : float) {
		this.min = min;
		this.max = max;
	}
}
END EX
アトリビュートを作成したら次はアトリビュートを持つプロパティの描画のためにPropertyDrawerを作成する必要があります。
このドローワークラスはPropertyDrawerを継承することと、 [[CustomPropertyDrawer]] アトリビュートを付ける必要があります。
CONVERTEXAMPLE
BEGIN EX
// プロパティ ドローワー クラスはエディタ スクリプトに記述して Editor という名前のフォルダの中に配置すべきです。

// RangeDrawer が RangeAttribute のプロパティのための ドローワー であることを示す
@CustomPropertyDrawer (RangeAttribute)
class RangeDrawer extends PropertyDrawer {
	
	// 指定の rect でプロパティを描画
	function OnGUI (position : Rect, property : SerializedProperty, label : GUIContent) {
		
		// スライダーの移動範囲を含むアトリビュートを最初に取得
		var range : RangeAttribute = attribute as RangeAttribute;
		
		// float , integer のいずれであるかにより各々 Slider または IntSlider としてプロパティを描画
		if (property.propertyType == SerializedPropertyType.Float)
			EditorGUI.Slider (position, property, range.min, range.max, label);
		else if (property.propertyType == SerializedPropertyType.Integer)
			EditorGUI.IntSlider (position, property, range.min, range.max, label);
		else
			EditorGUI.LabelField (position, label.text, "Range の型は float または int の型にして下さい。");
	}
}
END EX
パフォーマンス上の理由からEditorGUILayoutクラスはPropertyDrawerでは使用できないことに注意してください。

SA: [[PropertyAttribute]] class, [[CustomPropertyDrawer]] class.