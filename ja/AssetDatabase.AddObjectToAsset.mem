<signature>
AddObjectToAsset(Object,string)
</signature>
オブジェクトを下の階層（子）へ追加します
これは自作したデータを扱う際に最適です
追加されたObjectは削除を行うことは出来ません
再度全てを生成することになります
削除を行うとインスタンスIDも変更されてしまい、参照が外れてしまうので気をつけてください

アセットは '.assets' つきのアセットに対してのみ追加すべきです。インポートされたモデルやテクスチャアセットに追加するとデータが失われることに留意して下さい。
全てのパスはプロジェクトフォルダに対する相対指定とします。例えば "Assets/MyTextures/hello.png" です。

BEGIN EX
	@MenuItem("GameObject/Create Material")
	static function CreateMaterial () {
		// 簡単なマテリアルアセットを作成
		var material = new Material (Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");

		// これにアニメーションクリップを追加
		var animationClip = new AnimationClip ();
		animationClip.name = "My Clip";
		AssetDatabase.AddObjectToAsset(animationClip, material);

		// オブジェクトを追加後にアセットを再インポート
		// そうしない場合、プロジェクト保存時にのみ変更が表示される
		AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(animationClip));

		// 作成されたアセットのパスを表示
		Debug.Log(AssetDatabase.GetAssetPath(material));
	}
END EX
@param objectToAdd Object to add to the existing asset.
@param assetPath Filesystem path to the asset.
<signature>
AddObjectToAsset(Object,Object)
</signature>
オブジェクトを下の階層（子）へ追加します
これは自作したデータを扱う際に最適です
追加されたObjectは削除を行うことは出来ません
再度全てを生成することになります
削除を行うとインスタンスIDも変更されてしまい、参照が外れてしまうので気をつけてください。
アセットは '.assets' つきのアセットに対してのみ追加すべきです。インポートされたモデルやテクスチャアセットに追加すると再インポートあるいは Unity 終了時にデータが失われることに留意して下さい。

BEGIN EX
	@MenuItem("GameObject/Create Material")
	static function CreateMaterial () {
		// 簡単なマテリアルアセットを作成
		var material = new Material (Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");

		// これにアニメーションクリップを追加
		var animationClip = new AnimationClip ();
		animationClip.name = "My Clip";
		AssetDatabase.AddObjectToAsset(animationClip, material);

		// オブジェクトを追加後にアセットを再インポート
		// そうしない場合、プロジェクト保存時にのみ変更が表示される
		AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(animationClip));

		// 作成されたアセットのパスを表示
		Debug.Log(AssetDatabase.GetAssetPath(material));
	}
END EX
