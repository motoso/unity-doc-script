<signature>
Raycast(Vector2,Vector2,float,int,float,float)
</signature>
シーンのコライダーに対してレイを飛ばす
Raycast は例えるならば、空間上のある地点から特定方向へ発射されたセンサーのようなものです。センサーと接触した全てのオブジェクトは検知され報告されます。

この関数はコライダーが Raycast によりヒットされた場合 RaycastHit オブジェクトを返し、何もヒットしない場合は null を返します。layerMask を使用することで特定レイヤーのオブジェクトのみ判定できます（例えば敵キャラのみヒットを判定できます）。

Raycast は視界の範囲の判定、銃弾によりターゲットの当たり判定、さらに多くのゲーム シーンで役に立ちます。

さらにこの関数は線の開始地点のコライダーを検知します。この場合線がコライダーの中で開始していてコライダーの表面と交差していません。つまり返された衝突の法線がテストする線のベクトルの反対にセットされた場合、衝突の法線が計算できません。このような結果は RaycastHit2D のゼロ地点で得られるため、これを検知するのは容易です。

SA: LayerMask::ref:: クラス, RaycastHit2D::ref:: クラス, ::ref::RaycastAll, ::ref::Linecast, ::ref::defaultRaycastLayers, ::ref::ignoreRaycastLayer, ::ref::raycastsHitTriggers.
CONVERTEXAMPLE
BEGIN EX
// 表面から一定の高さで Rigidbody オブジェクトを浮遊

var floatHeight: float;     // 希望する浮遊の高さ
var liftForce: float;       // Rigidbody を浮かせるときの力
var damping: float;         // 速度に比例して力を減衰（跳ねる動作を減衰）

function FixedUpdate() {
	// 真っ直ぐ下に Raycast
	var hit: RaycastHit2D = Physics2D.Raycast(transform.position, -Vector2.up);
	
	// 何かヒットした場合...
	if (hit != null) {
		// 表面からの距離および希望する浮遊の高さとの
		// 相対的な差分を算出
		var distance = Mathf.Abs(hit.point.y - transform.position.y);
		var heightError: float = floatHeight - distance;
		
		// 力は高さの差分に比例するが、オブジェクトの速度に合わせて
		// 一部を減衰させる
		var force = liftForce * heightError - rigidbody2D.velocity.y * damping;
		
		// 力を Rigidbody に適用
		rigidbody2D.AddForce(Vector3.up * force);
	}
}
END EX
@param origin 2D 空間上の レイの 原点
@param direction レイの方向を示すベクトル
@param distance Raycast を行う最大距離
@param layerMask 特定レイヤーのオブジェクトを判定するフィルター
@param minDepth この値より大きい Z 座標（デプス）の場合のみオブジェクトを含める
@param maxDepth この値より小さい Z 座標（デプス）の場合のみオブジェクトを含める
