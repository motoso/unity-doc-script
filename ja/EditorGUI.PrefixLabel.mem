<signature>
PrefixLabel(Rect,GUIContent)
PrefixLabel(Rect,int,GUIContent)
</signature>
各フィールドの前にラベルを表示するために使用されます
フィールドが表示されるべき位置のRect情報を返します
{img EditorGUIPrefixLabel.png}\\
''エディタ ウィンドウにおける Prefix Label''

ほとんどのエディタコントロールはすでにビルトインのオプションで使用できるラベルがあり、引数の一つとして指定できます。PrefixLabel はそのようなビルトインのラベルが利用可能でない場合、またはゼロから自身のエディタ コントロールを作成する場合に使用出来ます。

PrefixLabel はラベルを含むコントロール全体の Rect を使って、ラベルを含まないコントロール自身のための Rect を返します。

さらに PrefixLabel はラベルがクリックされたときにリンクされたコントロールがキーボードのフォーカスを取得することを保証します（コントロールがキーボードのフォーカスをサポートする場合）。リンクされたコントロールの ID はオプションにより指定するか、または ID が指定されてない場合ラベルは自動的にその後に続くコントロールに自動的にリンクされます。

BEGIN EX
	// メッシュを膨らまします
	//
	// 使用方法：メッシュを選択してオブジェクトフィールドにドラッグ
	// Calculate （計算）をクリックして完了した後は再生してメッシュが膨らむのがみれる
	//
	// 注意：膨張の度合いを制御するには increaseRatio を変更
 
	// var は "InflateMesh.js" にある
	
	class InflateMeshEditor extends EditorWindow {
	
		var object : MeshFilter;
	
		@MenuItem("Examples/Inflate Mesh")
		static function Init () {
			var window = GetWindow (InflateMeshEditor);
			window.Show ();
		}
	
		function OnGUI () {
			var rect = EditorGUILayout.GetControlRect ();
			rect = EditorGUI.PrefixLabel (rect, GUIContent ("Select a mesh"));
			object = EditorGUI.ObjectField (rect,
					"Calculate:",
					object,
					MeshFilter);
			
			EditorGUI.BeginDisabledGroup (!object);
			if(GUI.Button (EditorGUILayout.GetControlRect (), "Calculate!"))
				Calculate ();
			EditorGUI.EndDisabledGroup ();
		}
		
		function Calculate () {
			var finalNormals = new Vector3[0];
			var mesh = object.sharedMesh;
			var vertices = mesh.vertices;
			var normals = mesh.normals;
	
			// Find identical vertices	
			// this will hold an ID for each vertex, vertices at 
			// the same position will share the same ID!
			var vertexIDs = new int[vertices.length]; 
			var counter : int = 0;

			for (var i = 0; i < vertices.length; i++) {
				for (var j = 0; j < vertices.length; j++) {
	 				if (vertexIDs[i] == 0) {
	  					counter++;
	  					vertexIDs[i] = counter;
	 				}
	 				if (i != j)
	  					if (vertices[i] == vertices[j] && vertices[i] != 0)
	   						vertexIDs[j] = vertexIDs[i];
				}
			}
	
			finalNormals = normals;
			calculated = 0.5;
			// 平均の法線を計算
			// counter はもっとも高い vertexID 、次に全てのグループを通して法線データを収集
			for (var k = 1; k <= counter; k++) { 
				var curAvgNormal : Vector3 = Vector3.zero;
				for (var l = 0; l < vertexIDs.length; l++)
		 			if (vertexIDs[l] == k) {
		 				// 同じ位置にある全ての頂点の法線を加算して累積
	  					curAvgNormal += normals[l]; 
					}
				curAvgNormal.Normalize(); //Normalize the result
				for (var m = 0; m < vertexIDs.length; m++)
	 				if (vertexIDs[m] == k) 
	 					finalNormals[m] = curAvgNormal;
			}
			object.gameObject.AddComponent ("InflateMesh").fNormals = finalNormals;
			Debug.Log ("コンポーネントの追加完了、再生してメッシュの膨張を確認して下さい!");
		}
	}
END EX
エディタスクリプトにアタッチされたスクリプト：
BEGIN EX
	// InflateMesh.js
	private var mesh : Mesh;
	private var vertices = new Vector3[0];
	private var normals = new Vector3[0];
	var fNormals = new Vector3[0];
	var increaseRatio = 0.005;
	function Start () {
		mesh = GetComponent (MeshFilter).mesh;
		vertices = mesh.vertices;
		normals = mesh.normals;
	}
	
	function Update () {
		for (var i = 0; i < vertices.length; i++) {
			vertices[i] += fNormals[i]  * Time.deltaTime * increaseRatio;
		}
		mesh.vertices = vertices;
	}
END EX
@param totalPosition ラベルおよびコントロールの両方で使用する画面の Rect
@param id コントロールの一意の ID 。指定しない場合、次のコントロールの ID が使用される
@param label コントロールの前に表示するラベル
@return コントロール自身のみに使用する画面の Rect
