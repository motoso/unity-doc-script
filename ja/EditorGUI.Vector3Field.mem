<signature>
Vector3Field(Rect,string,Vector3)
Vector3Field(Rect,GUIContent,Vector3)
</signature>
[[Vector3]] 型のフィールドを作成します
X,Y,Zのラベル部分をドラッグして数値を変動させることも出来ます
Make an X, Y & Z field for entering a [[Vector3]].
{img EditorGUIVector3Field.png}\\
''エディタ ウィンドウの Vector3 フィールド''
BEGIN EX
	// 詳細な回転（X,Y,Z および W 成分）、
	// 3D 空間の位置および選択された Transform の画面上の位置を表示するエディタ
	// ウィンドウ
	
	class CustomTransformInspector extends EditorWindow {
		var showing : boolean = true;
		var rotationComp : Vector4;
	
		@MenuItem("Examples/GameObject detailed inspector")
		static function Init() {
			var window = GetWindow(CustomTransformInspector);
			window.Show();
		}
		
		function OnInspectorUpdate() {
			Repaint();
		}
		function OnGUI() {
			var currObj = Selection.activeTransform;
			showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);
			if(showing) {
				if(currObj) {
					currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),
							"3D 空間の位置:",
							currObj.position);
					
					EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),
							"画面空間の位置:",
							Camera.main.WorldToScreenPoint(currObj.position));
					
					rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),
									"詳細な回転:",
									QuaternionToVector4(currObj.localRotation));
					currObj.localRotation = ConvertToQuaternion(rotationComp);
									
					currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),
									"スケール:",
									currObj.localScale);
					
				} else {
					EditorGUI.DropShadowLabel(
						Rect(3,15,position.width,20),
						"確認したいオブジェクトを選択して下さい");
				}		
			}
		}
		
		function ConvertToQuaternion(v4 : Vector4) {
			return Quaternion(v4.x, v4.y, v4.z, v4.w);
		}
		function QuaternionToVector4(q : Quaternion) {
			return Vector4(q.x, q.y, q.z, q.w);
		}	
	}
END EX
@param position 表示位置
@param label 左側に表示する文字列
@param value 現在値
@return ユーザにより入力された値。